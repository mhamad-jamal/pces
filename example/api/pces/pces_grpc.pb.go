// Copyright (c) Meta Platforms, Inc. and affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.14.0
// source: pces.proto

package pces

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PCeSAgent_Renew_FullMethodName           = "/pces.PCeSAgent/Renew"
	PCeSAgent_Status_FullMethodName          = "/pces.PCeSAgent/Status"
	PCeSAgent_GetTLSCert_FullMethodName      = "/pces.PCeSAgent/GetTLSCert"
	PCeSAgent_SignWithTLSCert_FullMethodName = "/pces.PCeSAgent/SignWithTLSCert"
)

// PCeSAgentClient is the client API for PCeSAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PCeS service definition.
type PCeSAgentClient interface {
	// Renews a certificate identified by label.
	Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*RenewResponse, error)
	// Returns the status of the PCeS agent.
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Returns the certificate.
	GetTLSCert(ctx context.Context, in *GetTLSCertRequest, opts ...grpc.CallOption) (*GetTLSCertResponse, error)
	// Signs data using the certificate's private key.
	SignWithTLSCert(ctx context.Context, in *SignWithTLSCertRequest, opts ...grpc.CallOption) (*SignWithTLSCertResponse, error)
}

type pCeSAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewPCeSAgentClient(cc grpc.ClientConnInterface) PCeSAgentClient {
	return &pCeSAgentClient{cc}
}

func (c *pCeSAgentClient) Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*RenewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenewResponse)
	err := c.cc.Invoke(ctx, PCeSAgent_Renew_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCeSAgentClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, PCeSAgent_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCeSAgentClient) GetTLSCert(ctx context.Context, in *GetTLSCertRequest, opts ...grpc.CallOption) (*GetTLSCertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTLSCertResponse)
	err := c.cc.Invoke(ctx, PCeSAgent_GetTLSCert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCeSAgentClient) SignWithTLSCert(ctx context.Context, in *SignWithTLSCertRequest, opts ...grpc.CallOption) (*SignWithTLSCertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignWithTLSCertResponse)
	err := c.cc.Invoke(ctx, PCeSAgent_SignWithTLSCert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PCeSAgentServer is the server API for PCeSAgent service.
// All implementations must embed UnimplementedPCeSAgentServer
// for forward compatibility.
//
// PCeS service definition.
type PCeSAgentServer interface {
	// Renews a certificate identified by label.
	Renew(context.Context, *RenewRequest) (*RenewResponse, error)
	// Returns the status of the PCeS agent.
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Returns the certificate.
	GetTLSCert(context.Context, *GetTLSCertRequest) (*GetTLSCertResponse, error)
	// Signs data using the certificate's private key.
	SignWithTLSCert(context.Context, *SignWithTLSCertRequest) (*SignWithTLSCertResponse, error)
	mustEmbedUnimplementedPCeSAgentServer()
}

// UnimplementedPCeSAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPCeSAgentServer struct{}

func (UnimplementedPCeSAgentServer) Renew(context.Context, *RenewRequest) (*RenewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Renew not implemented")
}
func (UnimplementedPCeSAgentServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedPCeSAgentServer) GetTLSCert(context.Context, *GetTLSCertRequest) (*GetTLSCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTLSCert not implemented")
}
func (UnimplementedPCeSAgentServer) SignWithTLSCert(context.Context, *SignWithTLSCertRequest) (*SignWithTLSCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignWithTLSCert not implemented")
}
func (UnimplementedPCeSAgentServer) mustEmbedUnimplementedPCeSAgentServer() {}
func (UnimplementedPCeSAgentServer) testEmbeddedByValue()                   {}

// UnsafePCeSAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PCeSAgentServer will
// result in compilation errors.
type UnsafePCeSAgentServer interface {
	mustEmbedUnimplementedPCeSAgentServer()
}

func RegisterPCeSAgentServer(s grpc.ServiceRegistrar, srv PCeSAgentServer) {
	// If the following call pancis, it indicates UnimplementedPCeSAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PCeSAgent_ServiceDesc, srv)
}

func _PCeSAgent_Renew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCeSAgentServer).Renew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PCeSAgent_Renew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCeSAgentServer).Renew(ctx, req.(*RenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCeSAgent_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCeSAgentServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PCeSAgent_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCeSAgentServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCeSAgent_GetTLSCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTLSCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCeSAgentServer).GetTLSCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PCeSAgent_GetTLSCert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCeSAgentServer).GetTLSCert(ctx, req.(*GetTLSCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCeSAgent_SignWithTLSCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignWithTLSCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCeSAgentServer).SignWithTLSCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PCeSAgent_SignWithTLSCert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCeSAgentServer).SignWithTLSCert(ctx, req.(*SignWithTLSCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PCeSAgent_ServiceDesc is the grpc.ServiceDesc for PCeSAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PCeSAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pces.PCeSAgent",
	HandlerType: (*PCeSAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Renew",
			Handler:    _PCeSAgent_Renew_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _PCeSAgent_Status_Handler,
		},
		{
			MethodName: "GetTLSCert",
			Handler:    _PCeSAgent_GetTLSCert_Handler,
		},
		{
			MethodName: "SignWithTLSCert",
			Handler:    _PCeSAgent_SignWithTLSCert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pces.proto",
}
